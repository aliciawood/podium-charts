{"version":3,"file":"main.80b628f923cc7db4f2ff.bundle.js","sources":["webpack:///./src/Charts/utils/formatters.js"],"sourcesContent":["import moment from 'moment';\nimport humanReadableDuration from 'humanize-duration';\n\nexport function date(granularity = 'month') {\n  const granularityMap = {\n    hour: 'ha',\n    day: 'MMM D',\n    week: 'MMM D',\n    month: 'MMM',\n    year: 'YYYY'\n  };\n  const granularityFormat = granularityMap[granularity];\n\n  if (!granularityFormat) return () => '';\n  return date => {\n    const momentDate = moment.utc(date);\n    return momentDate.isValid() ? momentDate.format(granularityFormat) : '';\n  };\n}\n\nexport const roundToPlaces = places => input => {\n  const number = Number(input);\n  const modifier = Math.pow(10, places);\n  const roundedNumber = Math.round(number * modifier) / modifier;\n  return commatize(roundedNumber.toString());\n};\n\nexport function secondsToMinutes(int) {\n  return commatize(Math.round(int / 60));\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function abbreviateNumber(value) {\n  if (value < 10000) return commatize(value);\n  let newValue = value;\n  const suffixes = ['', 'K', 'M', 'B', 'T'];\n  let suffixNum = 0;\n  while (newValue >= 1000) {\n    newValue /= 1000;\n    suffixNum++;\n  }\n  newValue = newValue.toPrecision(3);\n  newValue += suffixes[suffixNum];\n  return newValue;\n}\n\nexport function abbreviateTime(seconds) {\n  const minutes = Math.round(seconds / 60);\n  return abbreviateNumber(minutes);\n}\n\nexport function humanizeDuration(seconds) {\n  if (seconds < 60) return '< 1 min';\n\n  const ms = seconds * 1000;\n  const humanizeConfig = {\n    largest: 2,\n    delimiter: '\\u00A0',\n    units: ['h', 'm'],\n    language: 'abbreviations',\n    spacer: ' ',\n    round: true,\n    languages: {\n      abbreviations: { h: () => 'hr', m: () => 'min' }\n    }\n  };\n  const displayTime = humanReadableDuration(ms, humanizeConfig);\n  return displayTime;\n}\n\nexport const commatize = number => {\n  if (number) return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return number;\n};\n\nexport const nullToValue = (delegateFormatter, fallbackValue) => {\n  if (typeof fallbackValue === 'undefined') {\n    throw new TypeError('No fallback value specified for formatter');\n  }\n  const formatter = (value, dataKey) => {\n    if (value === null) {\n      return fallbackValue;\n    } else {\n      return delegateFormatter(value, dataKey);\n    }\n  };\n  return formatter;\n};\n\nexport default {\n  abbreviateNumber,\n  abbreviateTime,\n  capitalize,\n  commatize,\n  nullToValue,\n  date,\n  humanizeDuration,\n  secondsToMinutes,\n  roundToPlaces\n};\n"],"mappings":"AAmCA","sourceRoot":""}